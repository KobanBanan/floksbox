import asyncio
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import Bot
from django.conf import settings
import logging

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –∏ Email"""

    @staticmethod
    async def send_telegram_notification(user_request):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            bot_token = settings.TELEGRAM_CONFIG['bot_token']
            chat_id = settings.TELEGRAM_CONFIG['chat_id']

            if not bot_token or not chat_id or bot_token == "YOUR_TELEGRAM_BOT_TOKEN":
                logger.warning("Telegram bot token –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False

            bot = Bot(token=bot_token)

            message = f"""üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ FloksBox!
                    üë§ –ò–º—è: {user_request.name}
                    üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_request.phone}
                    üìß Email: {user_request.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
                    üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {user_request.message or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    
                    üìÖ –î–∞—Ç–∞: {user_request.created_at.strftime('%d.%m.%Y %H:%M')}"""

            await bot.send_message(chat_id=chat_id, text=message)
            logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ {user_request.id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

    @staticmethod
    def send_email_notification(user_request):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ Email"""
        try:
            email_config = settings.EMAIL_CONFIG

            if not email_config['email'] or email_config['email'] == "your-email@gmail.com":
                logger.warning("Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return False

            msg = MIMEMultipart()
            msg['From'] = email_config['email']
            msg['To'] = email_config['recipient']
            msg['Subject'] = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ FloksBox –æ—Ç {user_request.name}"

            body = f"""
                    –ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ FloksBox:
                    
                    –ò–º—è: {user_request.name}
                    –¢–µ–ª–µ—Ñ–æ–Ω: {user_request.phone}
                    Email: {user_request.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
                    –°–æ–æ–±—â–µ–Ω–∏–µ: {user_request.message or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    
                    –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user_request.created_at.strftime('%d.%m.%Y %H:%M')}
                    
                    ---
                    –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ FloksBox."""

            msg.attach(MIMEText(body, 'plain', 'utf-8'))

            server = smtplib.SMTP(email_config['smtp_server'], email_config['smtp_port'])
            server.starttls()
            server.login(email_config['email'], email_config['password'])
            text = msg.as_string()
            server.sendmail(email_config['email'], email_config['recipient'], text)
            server.quit()

            logger.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ {user_request.id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Email: {e}")
            return False

    @staticmethod
    def send_notifications(user_request):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –∏ Email"""
        results = {
            'telegram': False,
            'email': False
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            results['telegram'] = loop.run_until_complete(
                NotificationService.send_telegram_notification(user_request)
            )
            loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ Email
        results['email'] = NotificationService.send_email_notification(user_request)

        return results
